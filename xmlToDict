import xml.etree.ElementTree as ET

def xml_to_dict(element):
    # Create a dictionary for the current element
    node_dict = {element.tag: []}
    
    # Process each child of the element
    for child in element:
        # If the child has children, convert it to a dictionary
        if len(child) > 0:
            node_dict[element.tag].append(xml_to_dict(child))
        else:
            # If the child has no children, add its text content
            node_dict[element.tag].append({child.tag: child.text})
    
    return node_dict

def parse_xml_to_nested_dict(file_path):
    # Parse the XML file
    tree = ET.parse(file_path)
    root = tree.getroot()
    
    # Convert the root element to a nested dictionary
    return xml_to_dict(root)

# Example usage
if __name__ == "__main__":
    xml_file_path = "example.xml"  # Replace with your XML file path
    nested_dict = parse_xml_to_nested_dict(xml_file_path)
    print(nested_dict)
