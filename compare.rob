
  import xml.etree.ElementTree as ET

def get_f_values_from_specific_c(xml_file, c_index):
    """
    Extract 'f' values as double from specific 'c' elements based on their index.

    Args:
    - xml_file: Path to the XML file.
    - c_index: Index of the 'c' element to extract values from (0-based index).

    Returns:
    - A list of 'f' values for the specified 'c' element.
    """
    # Parse the XML file
    tree = ET.parse(xml_file)
    root = tree.getroot()

    # Find all 'c' elements
    c_elements = root.findall('.//c')
    
    # Check if the requested index is valid
    if c_index >= len(c_elements):
        return f"No 'c' element found at index {c_index}."

    # Get the specified 'c' element
    specific_c = c_elements[c_index]

    # Find all 'f' values corresponding to the 'd' elements within the specified 'c'
    f_values = []
    for d_element in specific_c.findall('.//d'):
        # Find all 'f' elements under each 'd' element
        f_elements = d_element.findall('.//f')
        f_values.extend(float(f_element.text) for f_element in f_elements if f_element.text is not None)

    # Return the 'f' values as doubles
    return f_values

# Example usage
xml_file = 'file1.xml'  # Replace with your XML file path
c_index = 0  # Specify the index of 'c' you want to extract

f_values = get_f_values_from_specific_c(xml_file, c_index)
print("F values from specific C:", f_values)
