*** Settings ***
Resource    keywords.robot    # Load the keywords

*** Variables ***
${TEST_FILE}    test.xml

*** Test Cases ***

Test XML Comparison With Tolerance
    [Documentation]  Test to compare the test XML file with the reference XML file.
    Compare XML Files With Tolerance    ${TEST_

*** Settings ***
Library    lib/compare_xml.py    # Import the Python library

*** Variables ***
${REFERENCE_FILE}    reference_data.xml

*** Keywords ***

Compare XML Files With Tolerance
    [Arguments]    ${test_file}
    ${xpaths_tolerance_list}=    Create List    ("a/b/c/d", 0.01)    ("a/b/c/e", 0.05)    # Add more pairs as needed
    
    Compare Xml Files With Tolerance 


${REFERENCE_FILE}    ${test_file}    @{xpaths_tolerance_import argparse
from robot.api import logger

def compare_xml_files_with_tolerance(reference_file, test_file, xpaths_tolerance_string):
    """
    Compare two XML files based on XPaths and tolerances.
    The XPath-tolerance pairs are passed as a multi-line string with each pair on a new line.
    """
    # Convert the string into a dictionary
    xpaths_tolerance_dict = parse_xpaths_tolerance_string(xpaths_tolerance_string)

    # Extract values from the XML files using the XPaths
    reference_values_dict = extract_values_from_xml(reference_file, list(xpaths_tolerance_dict.keys()))
    test_values_dict = extract_values_from_xml(test_file, list(xpaths_tolerance_dict.keys()))

    # Calculate deltas for all xpaths
    deltas_dict = calculate_deltas(reference_values_dict, test_values_dict)

    # Iterate over each XPath and its corresponding tolerance
    for xpath, tolerance in xpaths_tolerance_dict.items():
        deltas = deltas_dict.get(xpath, [])

        # Find any deltas exceeding the tolerance
        exceeding_deltas = [delta for delta in deltas if abs(delta) > tolerance]

        if exceeding_deltas:
            raise AssertionError(f"XPath '{xpath}' has {len(exceeding_deltas)} deltas exceeding tolerance {tolerance}: {exceeding_deltas}")

    logger.info("XML comparison passed all tolerance checks", also_console=True)
    return True


def parse_xpaths_tolerance_string(xpaths_tolerance_string):
    """
    Convert the string of XPath-tolerance pairs into a dictionary.
    Each line of the string should be in the format: 'XPath tolerance'
    """
    xpaths_tolerance_dict = {}
    
    # Split the string into lines
    lines = xpaths_tolerance_string.strip().splitlines()
    
    # Process each line
    for line in lines:
        parts = line.strip().split()  # Strip any extra spaces and split by whitespace
        if len(parts) == 2:
            xpath = parts[0].strip()  # Strip potential extra spaces
            tolerance = float(parts[1].strip())
            xpaths_tolerance_dict[xpath] = tolerance
        else:
            raise ValueError(f"Invalid format for line: '{line}'")

    return xpaths_tolerance_dict


def extract_values_from_xml(xml_file, xpaths):
    """
    A placeholder function for extracting values from the XML file.
    This function needs to be implemented according to your specific XML structure.
    """
    # Implementation to extract values from XML using xpaths.
    # For example, use lxml or xml.etree.ElementTree to parse the XML.
    pass


def calculate_deltas(reference_values_dict, test_values_dict):
    """
    A placeholder function to calculate deltas between reference and test XML values.
    """
    # Implementation to calculate the difference between reference and test XML values.
    pass


def main():
    # Set up command line argument parser
    parser = argparse.ArgumentParser(description="Compare two XML files based on XPaths and tolerance values.")
    
    # Required arguments: reference file, test file
    parser.add_argument("reference_file", help="The reference XML file.")
    parser.add_argument("test_file", help="The test XML file.")
    
    # Optional argument for tag-tolerance pairs
    parser.add_argument(
        "--xpaths_tolerance",
        help="A multi-line string where each line is 'XPath tolerance'. Example:\n'a/b/c/d 0.01\na/b/e/f 0.05'.",
        required=True
    )
    
    # Parse the arguments
    args = parser.parse_args()

    # Call the comparison function with provided arguments
    try:
        compare_xml_files_with_tolerance(args.reference_file, args.test_file, args.xpaths_tolerance)
        print("XML comparison completed successfully.")
    except Exception as e:
        print(f"XML comparison failed: {e}")


if __name__ == "__main__":
    main()

